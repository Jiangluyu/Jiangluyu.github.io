<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis睡醒了</title>
  <icon>https://www.gravatar.com/avatar/e3357417f3bf92b841d72b4abf701b40</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.jiangluyu.com/"/>
  <updated>2020-02-28T18:01:59.940Z</updated>
  <id>https://www.jiangluyu.com/</id>
  
  <author>
    <name>Louis</name>
    <email>945803847@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今日母亲为我理发</title>
    <link href="https://www.jiangluyu.com/2020/02/29/%E4%BB%8A%E6%97%A5%E6%AF%8D%E4%BA%B2%E4%B8%BA%E6%88%91%E7%90%86%E5%8F%91/"/>
    <id>https://www.jiangluyu.com/2020/02/29/今日母亲为我理发/</id>
    <published>2020-02-28T17:57:53.000Z</published>
    <updated>2020-02-28T18:01:59.940Z</updated>
    
    <content type="html"><![CDATA[<p>因疫情缘故，</p><p>头发极长，</p><p>于是今日母亲用网购来的推子与剪子，</p><p>为我们爷俩剪了头，</p><p>十分满意。</p><p>父亲发型阴差阳错，</p><p>甚是新潮。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因疫情缘故，&lt;/p&gt;
&lt;p&gt;头发极长，&lt;/p&gt;
&lt;p&gt;于是今日母亲用网购来的推子与剪子，&lt;/p&gt;
&lt;p&gt;为我们爷俩剪了头，&lt;/p&gt;
&lt;p&gt;十分满意。&lt;/p&gt;
&lt;p&gt;父亲发型阴差阳错，&lt;/p&gt;
&lt;p&gt;甚是新潮。&lt;/p&gt;

      
    
    </summary>
    
      <category term="日常" scheme="https://www.jiangluyu.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="活在此时" scheme="https://www.jiangluyu.com/tags/%E6%B4%BB%E5%9C%A8%E6%AD%A4%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>C++set详解</title>
    <link href="https://www.jiangluyu.com/2020/02/27/C++set/"/>
    <id>https://www.jiangluyu.com/2020/02/27/C++set/</id>
    <published>2020-02-26T16:43:00.000Z</published>
    <updated>2020-02-26T18:16:08.091Z</updated>
    
    <content type="html"><![CDATA[<p>关于C++ STL set的用法以及知识延伸。</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        nums.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等效 set&lt;int&gt;::iterator it = nums.begin();</span></span><br><span class="line">    <span class="keyword">auto</span> it = nums.begin();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (it; it != nums.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">begin() <span class="comment">// 返回指向set容器第一个元素的迭代器</span></span><br><span class="line"></span><br><span class="line">end() <span class="comment">// 返回指向set容器最后一个元素的迭代器，不存值</span></span><br><span class="line">    </span><br><span class="line">rbegin() <span class="comment">// 等效end()</span></span><br><span class="line">    </span><br><span class="line">rend() <span class="comment">// 等效begin()</span></span><br><span class="line">    </span><br><span class="line">clear() <span class="comment">// 清空set容器</span></span><br><span class="line">    </span><br><span class="line">empty() <span class="comment">// 判断set容器是否为空</span></span><br><span class="line">    </span><br><span class="line">max_size() <span class="comment">// 返回set容器可能包含元素的最大个数</span></span><br><span class="line">    </span><br><span class="line">size() <span class="comment">// 返回当前set容器中的元素个数</span></span><br><span class="line">    </span><br><span class="line">insert(x) <span class="comment">// 向set容器中插入值x，返回值为pair&lt;it, bool&gt;，bool表示是否成功，it指向x在set中的位置</span></span><br><span class="line">    </span><br><span class="line">insert(it_start, it_end) <span class="comment">// 向set中插入两迭代器中间的值</span></span><br><span class="line">    </span><br><span class="line">erase(x) <span class="comment">// 从set容器中删除值x，若x为迭代器，则删除迭代器指向的值</span></span><br><span class="line">    </span><br><span class="line">erase(it_start, it_end) <span class="comment">// 删除set中两迭代器中间的值，包括*it_start，不包括*it_end</span></span><br><span class="line">    </span><br><span class="line">count(x) <span class="comment">// 计算set中x出现的次数，在set中只可能为1或0</span></span><br><span class="line">    </span><br><span class="line">find(x) <span class="comment">// 若找到x，则返回指向x的迭代器，否则返回end()</span></span><br><span class="line">    </span><br><span class="line">lower_bound(x) <span class="comment">// 返回指向第一个大于等于x的值的迭代器</span></span><br><span class="line">    </span><br><span class="line">upper_bound(x) <span class="comment">// 返回指向第一个大于x的值的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回pair&lt;it, it&gt;，即在两迭代器内，所有等于x的值的范围，即第一个x的位置与最后一个x的位置，set中若不存在x则两值相等</span></span><br><span class="line">equal_range(it_begin, it_end, x) </span><br><span class="line"></span><br><span class="line">set1.insert(set2.begin(), set3.end()) <span class="comment">// set1 = set2 ∪ set3 并去重</span></span><br><span class="line"></span><br><span class="line">set1.swap(set2) <span class="comment">// 两个set内容交换</span></span><br></pre></td></tr></table></figure><h3 id="知识延伸"><a href="#知识延伸" class="headerlink" title="知识延伸"></a>知识延伸</h3><h5 id="map和set插入删除效率比其他序列容器高的原因："><a href="#map和set插入删除效率比其他序列容器高的原因：" class="headerlink" title="map和set插入删除效率比其他序列容器高的原因："></a>map和set插入删除效率比其他序列容器高的原因：</h5><blockquote><p>底层实现为红黑树，对于关联容器来说，不需要做内存拷贝和内存移动。set容器内所有元素都是以节点的方式来存储，其节点结构和链表差不多，指向父节点和子节点。</p></blockquote><h5 id="map在每次insert、erase操作之后，以前的迭代器是否会过期？"><a href="#map在每次insert、erase操作之后，以前的迭代器是否会过期？" class="headerlink" title="map在每次insert、erase操作之后，以前的迭代器是否会过期？"></a>map在每次insert、erase操作之后，以前的迭代器是否会过期？</h5><blockquote><p>不会，注意vector在进行相应操作后迭代器可能会过期。</p></blockquote><h5 id="插入、搜索元素时，效率如何？"><a href="#插入、搜索元素时，效率如何？" class="headerlink" title="插入、搜索元素时，效率如何？"></a>插入、搜索元素时，效率如何？</h5><blockquote><p>set中使用的是二分查找，时间复杂度为<em>logn</em>，换言之，数据增大一倍时，搜索次数会多1次。</p></blockquote><h5 id="如何求并集、交集、差集、对称差集（A∪B-A∩B）？"><a href="#如何求并集、交集、差集、对称差集（A∪B-A∩B）？" class="headerlink" title="如何求并集、交集、差集、对称差集（A∪B-A∩B）？"></a>如何求并集、交集、差集、对称差集（A∪B-A∩B）？</h5><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 交集</span></span><br><span class="line">&gt; set_intersection(it1_start, it1_end, it2_start, it2_end, inserter(res, res.begin()))</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 差集</span></span><br><span class="line">&gt; set_difference(it1_start, it1_end, it2_start, it2_end, inserter(res, res.begin()))</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 并集</span></span><br><span class="line">&gt; set_union(it1_start, it1_end, it2_start, it2_end, inserter(res, res.begin()))</span><br><span class="line">&gt;     </span><br><span class="line">&gt; <span class="comment">// 对称差集</span></span><br><span class="line">&gt; set_symmetry_difference(it1_start, it1_end, it2_start, it2_end, inserter(res, res.begin()))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于C++ STL set的用法以及知识延伸。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://www.jiangluyu.com/categories/C/"/>
    
    
      <category term="算法" scheme="https://www.jiangluyu.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="STL" scheme="https://www.jiangluyu.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>E021-合并两个有序链表</title>
    <link href="https://www.jiangluyu.com/2020/02/21/E021-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.jiangluyu.com/2020/02/21/E021-合并两个有序链表/</id>
    <published>2020-02-21T15:08:27.000Z</published>
    <updated>2020-02-21T15:50:31.267Z</updated>
    
    <content type="html"><![CDATA[<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><a id="more"></a><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><p>思路即每次挑选一个“头”节点，在剩下的节点中再递归挑选“头”节点，直至有一个链表被挑光，即为空。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：<em>O</em>(<em>m</em> + <em>n</em>)，<em>m</em>，<em>n</em>分别为<code>l1</code>,<code>l2</code>的元素个数。递归函数每次去掉一个元素，直到两个链表都为空，因此需要调用<em>R</em>=<em>O</em>(<em>m</em> + <em>n</em>)次。而在递归函数中我们只进行了<code>next</code>指针的赋值操作，复杂度为<em>O</em>(1)，故递归的总时间复杂度为<em>O</em>(<em>m</em> + <em>n</em>)。</li><li>空间复杂度：<em>O</em>(<em>m</em> + <em>n</em>)，递归调用了该函数<em>m</em> + <em>n</em>次，使用了<em>m</em> + <em>n</em>个栈帧，故空间复杂度为<em>O</em>(<em>m</em> + <em>n</em>)。</li></ul><hr><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><p>用一个<code>prev</code>指针维护当前接在结果中的最后一个节点，每次迭代要做的就是决定<code>l1</code>与<code>l2</code>中哪一个的剩余头节点成为<code>prev-&gt;next</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* resHead = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            resHead = l1;</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            resHead = l2;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* prev = resHead;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                prev-&gt;next = l1;</span><br><span class="line">                prev = prev-&gt;next;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                prev-&gt;next = l2;</span><br><span class="line">                prev = prev-&gt;next;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            prev-&gt;next = l2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l2 == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            prev-&gt;next = l1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：<em>O</em>(<em>m</em> + <em>n</em>)，<em>m</em>，<em>n</em>分别为<code>l1</code>,<code>l2</code>的元素个数，相当于遍历了两次较短链表的长度。</li><li>空间复杂度：<em>O</em>(1)，每次迭代只使用了同一个<code>prev</code>指针，因此为常数级复杂度。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4&lt;br&gt;输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.jiangluyu.com/categories/LeetCode/"/>
    
    
      <category term="list" scheme="https://www.jiangluyu.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>电脑维修实用问题汇总</title>
    <link href="https://www.jiangluyu.com/2020/02/21/%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE%E5%AE%9E%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://www.jiangluyu.com/2020/02/21/电脑维修实用问题汇总/</id>
    <published>2020-02-21T10:51:37.000Z</published>
    <updated>2020-02-23T09:29:55.597Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用问题汇总。</p><a id="more"></a><h2 id="实用问题汇总："><a href="#实用问题汇总：" class="headerlink" title="实用问题汇总："></a>实用问题汇总：</h2><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>进水<ul><li>进水的问题一定要<strong>马上和机主联系</strong>，不可耽误，如果<strong>没法第一时间接单，就让机主马上送去维修</strong>，或者将单子转给别的技术员，总之<strong>处理要快</strong></li><li>询问机主是<strong>什么时候进的水？进的是什么水？进了多少水？进水之后做了什么？</strong>（如果遇上神仙机主，机子进水了还不拆开开始晒干，等过了一两天才找你，甚至进完水没多久觉得可以了还开机的，这种单子最好就别接了）</li><li>如果还来得及，提醒机主<strong>一定不能开机</strong>，再接到机子后，首先把电源拆掉（个人建议这里别放静电，放了有可能出事），如果发现进水量过大，已经渗入主板内，先用纸把周围的水吸附掉，把硬盘拆下来（电脑出问题优先保住硬盘），继续吸附水，然后接着拆，以此循环，把能吸附的水吸附掉后，视情况建议机主送去维修店烘干。如果倒入的是饮料。。。尽力而为吧，某些地方可以用酒精纸（不过多半救不了），同样能处理完后让机主送去维修</li><li>如果以上更糟糕的情况没有发生，则将拆开后的本子和配件放在通风处（不能让阳光直射），等待晾干，原则上是至少要晾3天</li></ul></li><li>清灰<ul><li>顺序：拆机→清理风扇→清理其他→装机</li><li>注意：<strong>分清螺丝</strong>、视电脑拆机难度，决定拆机层次，结构比较复杂的尽量降低拆机的层次（但依然要<strong>把电池拆下来</strong>）、用皮老虎，角度尽量贴近风扇平面，<strong>对着扇叶吹</strong>，吹的方向应该是风扇靠近笔记本边缘的方向，以免吹出来的灰尘落到元件上，吹的过程中可<strong>用小刷子擦拭扇叶</strong>，帮助清理。吹完后，用小刷子轻轻扫过平面，将残留的灰尘扫出去。最后用皮老虎再吹，如果基本没有灰尘吹出，则差不多清理完毕</li></ul></li><li>花屏<ul><li>有能力的可以拆屏幕框重新插拔排线，否则直接建议机主售后</li></ul></li><li>扩容<ul><li>硬盘：注意主板接口与硬盘<strong>接口是否匹配</strong>（要熟知常见的接口！）</li><li>内存：注意内存的<strong>接口类型</strong>（DDR3、DDR3L、DDR4）以及<strong>频率</strong>（向下兼容，按最低的算）</li></ul></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li>系统<ul><li>系统镜像去MSDN下载原版</li><li>制作PE盘（去微PE官网下载或使用飞扬的镜像，其实是一个东西）</li><li>激活使用KMS（建议使用胡萝卜周博客中下载的版本）</li></ul></li><li>常用软件（常备安装文件！安装失败时注意错误代码！）<ul><li>驱动人生、驱动精灵，重装电脑时使用装机版，其他情况下只有当有问题时才尝试升级、重装驱动，不要随意升级其他正常工作的驱动！</li><li>Microsoft Office</li><li>Adobe</li><li>AutoCAD</li></ul></li></ul><p>注：在安装CAD等软件过程中报错，比起直接搜索“安装到哪里不动“”安装XXX出错”，先查看这类软件的安装日志，看看安装日志是在哪一步失败，再推断和搜索安装原因是最高效、最准确的（如果你找得到安装日志的话，大部分的软件应该都有，因为写他们的程序员自己也要看）</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="Q1：网页打不开"><a href="#Q1：网页打不开" class="headerlink" title="Q1：网页打不开"></a>Q1：网页打不开</h4><ul><li>检查<strong>网络连接是否正常</strong></li><li>检查<strong>是否启动代理</strong>（SSR之类），小飞机启动后选择关闭有时也会导致无法打开网页</li><li>检查<strong>防火墙设置</strong>，将浏览器或其他连不了网络的软件添加至<em>例外</em>中</li><li><strong>清除缓存与Cookie信息</strong>[IE中：工具→Internet选项→常规→浏览历史记录→删除]，CC登不上时常用</li><li>使用<strong>360断网急救箱</strong></li></ul><h4 id="Q2：蓝牙连不上"><a href="#Q2：蓝牙连不上" class="headerlink" title="Q2：蓝牙连不上"></a>Q2：蓝牙连不上</h4><ul><li>检查<strong>是否打开蓝牙</strong></li><li>检查<strong>是否开了飞行模式</strong>而自动关闭蓝牙</li><li><strong>查看蓝牙驱动</strong>[设备管理器→蓝牙]，哪里不对，更新哪里</li><li><strong>Win+R</strong>打开运行，输入<strong>services.msc</strong>，查看其中与蓝牙有关的服务项（如Bluetooth Support Service），如果有禁用的，则<strong>改为自动启动</strong></li><li>麻烦的情况：能做的都做了，重启后有时可以有时不行（大概率在冬天），这是一个玄学问题，售后或者一般等天气回暖就好了</li></ul><h4 id="Q3：广告弹窗"><a href="#Q3：广告弹窗" class="headerlink" title="Q3：广告弹窗"></a>Q3：广告弹窗</h4><ul><li>打开任务管理器，定位弹窗广告的进程，右键选择“打开文件所在的位置”，打开后删掉或者卸载相关文件，并关掉对应的进程便可</li><li>如果不能确定哪个进程是弹窗广告的话，要进行试错，选择从没见过、从命名不能理解进程用途、非系统文件命名方式的进程，先打开文件所在位置，然后关掉进程，如果弹窗消失，说明找到了</li><li>部分弹窗运行文件删除的时候可能没有权限（真的非常流氓），可以进入Window10的安全模式（<strong>Win+R</strong>，输入<strong>msconfig</strong>，勾选<strong>安全引导</strong>，点击<strong>确定</strong>，<strong>重启</strong>电脑便好），再去相应的文件位置删除（安全模式能够自动获取权限）</li><li>如果机主反馈弹窗又重新出现，你发现原来的弹窗文件又生成了，而机主又不愿意卸载使其生成的软件（以金山毒霸为首），那么可以使用“偷天换日”的做法：复制弹窗对应的exe文件的文件名，将原来的文件删掉后，在原来的位置新建立一个txt文件，将文件名改为复制的文件名（记得修改后缀），然后右键改文件，点击“属性”，在“安全”中点击编辑，在权限窗口中勾选“拒绝”一栏，这样当软件想要读取的时候就会“哑火”</li><li>具体可参照这个链接：<a href="https://jingyan.baidu.com/article/3a2f7c2e51d76d67afd611be.html">https://jingyan.baidu.com/article/3a2f7c2e51d76d67afd611be.html</a></li><li>常见的弹窗系软件：360系，爱奇艺，腾讯视频，2345系（好压、看图王等），搜狐系</li><li>懒人法：火绒的弹窗管理</li></ul><h4 id="Q4：电脑启动慢、卡顿"><a href="#Q4：电脑启动慢、卡顿" class="headerlink" title="Q4：电脑启动慢、卡顿"></a>Q4：电脑启动慢、卡顿</h4><ul><li>若电脑服役时间较久（有的甚至是没有SSD的年代的电脑），最好选择硬件升级</li><li>启动慢修改开机启动项：<strong>Win+R</strong>，输入<strong>msconfig</strong>，在<em>常规</em>一栏中选择有选择的启动，并勾选<em>加载启动项</em>，到<em>启动</em>一栏中对启动项进行调整</li><li>懒人法：火绒的启动项管理</li></ul><h4 id="Q5：系统重装"><a href="#Q5：系统重装" class="headerlink" title="Q5：系统重装"></a>Q5：系统重装</h4><ul><li>注意事项：询问机主是否需要<strong>备份</strong>，以及重装后<strong>需要重新安装的软件</strong></li></ul><h4 id="Q6：电脑没声音"><a href="#Q6：电脑没声音" class="headerlink" title="Q6：电脑没声音"></a>Q6：电脑没声音</h4><ul><li><strong>使用声音疑难解答</strong>[声音图标（右键）→声音问题疑难解答]（这个检测出的问题常常可以作为百度的关键词，比直接搜索问题要精准一点）</li><li><strong>设置扬声器为默认设备</strong>[声音图标（右键）→打开音量合成器→系统声音→播放]</li><li><strong>扬声器还原默认值</strong>[扬声器（右键）→高级→还原默认值]</li><li><strong>检查驱动</strong>[开始图标右键→设备管理器（快捷键Win+X, M）→声音、视频和游戏控制器设备管理器→Realtek High Definition Audio（或Realtek Audio）]，使用驱动精灵进行重装或更新</li><li>存在特殊情况：笔记本插上耳机有声音，外放没声音。在以上方法排除后，依然出现这种情况，那么打开设备管理器，点击系统设备，找到英特尔智音技术控制器，右键点击选择更新驱动就好了，再选择“自动搜索”或者“浏览计算机”，如果是后者的话，应该选择的驱动是High Definition Audio（这个我找不到之前的解决链接了，按照记忆写了一下，找“智音技术”准没错）</li></ul><h4 id="Q7：连不上网"><a href="#Q7：连不上网" class="headerlink" title="Q7：连不上网"></a>Q7：连不上网</h4><ul><li>无线网：（以下方法按顺序进行，若都无效可能是硬件问题，建议售后）</li></ul><ol><li>查看<strong>是否进入了飞行模式</strong>[右下角网络图标→飞行模式]</li><li>查看<strong>设备管理器中的驱动状态</strong>[左下角开始图标右键→设备管理器（快捷键Win+X, M）→网络适配器]，有线网一般是带有<em>PCIe</em>的字样，无线网一般是带有<em>Wireless</em>，如果对应驱动出现<em>红叉</em>或者<em>警告标志</em>，一般是驱动出了问题，更新或者重新安装就行了，没有的话，直接尝试重新安装</li><li>使用系统自带的<strong>疑难解答</strong>[右下角网络图标→设置→网络疑难解答]</li><li>尝试<strong>360断网急救箱</strong></li><li><strong>Win+R</strong>打开运行，输入<strong>cmd</strong>，在命令提示符中<strong>输入命令回车并重启</strong>：</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><ol start="6"><li>较为麻烦的情况：网络列表上<strong>没有可连接的网络</strong>，设备管理器中<strong>找不到对应驱动</strong>，甚至在”网络和Internet”上<strong>找不到<em>WLAN</em>等表项</strong>，驱动精灵安装驱动时<strong>没有安装网卡驱动的选项</strong>，而且机主告诉你，他<strong>无线能用但有线不能或者反之或者皆不能</strong>，说明很有可能<strong>网卡硬件出了问题</strong>，拆机后<strong>对网卡重新插拔</strong>（注意记住连接网卡的两个小细线，连接的顺序和位置不能错）。要注意这个可插拔的网卡只管无线网！因此如果你再重新插拔后无线网依然没法用，或者以上情况中的主体是有线网，那么恭喜你，这电脑很有可能就修不好了（参照刘双嘉同学亲身经历）。这个麻烦情况大都出现在冬天，初步推断是硬件老化加上热胀冷缩引起的，建议送报修或者售后。</li></ol><ul><li>有线网：（以下方法按顺序进行，若都无效可能是硬件问题，建议售后）</li></ul><ol><li><p>检查<strong>网线是否插好</strong>，若仍提示<em>网络电缆未插入</em>可以尝试更换网线</p></li><li><p>使用系统自带的<strong>疑难解答</strong>[右下角网络图标→设置→网络疑难解答]</p></li><li><p>尝试<strong>360断网急救箱</strong></p></li><li><p><strong>Win+R</strong>打开运行，输入<strong>cmd</strong>，在命令提示符中<strong>输入命令回车并重启</strong>：</p></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh winsock reset</span><br></pre></td></tr></table></figure><ol start="5"><li>使用驱动精灵/驱动人生<strong>重新安装网卡驱动</strong></li></ol><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><p>除了动手以外，想做“好”的一定要对笔记本参数保持敏感，经常学习。</p><p>下面是一些推荐的信息源：</p><p>公众号：笔吧评测室</p><p>b站：翼王，Linus等</p><h3 id="常用资源-软件安装"><a href="#常用资源-软件安装" class="headerlink" title="常用资源[软件安装]"></a>常用资源[软件安装]</h3><ul><li>微信公众号：软件安装管家</li><li>胡萝卜周博客（右上角放大镜检索）：<a href="http://www.carrotchou.blog">http://www.carrotchou.blog</a></li><li>MSDN：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些常用问题汇总。&lt;/p&gt;
    
    </summary>
    
      <category term="电脑维修" scheme="https://www.jiangluyu.com/categories/%E7%94%B5%E8%84%91%E7%BB%B4%E4%BF%AE/"/>
    
    
      <category term="问题汇总" scheme="https://www.jiangluyu.com/tags/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>形近词辨析</title>
    <link href="https://www.jiangluyu.com/2020/02/16/%E5%BD%A2%E8%BF%91%E8%AF%8D%E8%BE%A8%E6%9E%90/"/>
    <id>https://www.jiangluyu.com/2020/02/16/形近词辨析/</id>
    <published>2020-02-16T07:37:16.000Z</published>
    <updated>2020-02-21T18:07:17.134Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用形近词整理。</p><a id="more"></a><p><strong>precipitate</strong> v.使(坏事等)突然发生；使沉淀；使水蒸气凝结； a.仓促的，鲁莽的，突如其来的； n.沉淀物</p><ul><li><strong>percipient</strong> a.敏锐的，有洞察力的，理解透彻的</li><li><strong>perceive</strong> v.觉察，发觉，发现，感知，理解</li></ul><hr><p><strong>mobilization</strong> n.动员；调动</p><ul><li><strong>mobility</strong> n.可动性；能动性；灵活性</li></ul><hr><p><strong>defer</strong> v.推迟；服从</p><ul><li><strong>deter</strong> v.阻止</li></ul><hr><p><strong>conclusive</strong> a.确定性的，决定性的，无争论余地的</p><ul><li><p><strong>exclusive</strong> a.独有的，独占的（= only）；排外的；高级的</p></li><li><p><strong>exclusively</strong> adv.唯一的</p></li></ul><hr><p><strong>cranial</strong> a.颅的</p><ul><li><strong>cardinal</strong> a.首要的，基本的</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些常用形近词整理。&lt;/p&gt;
    
    </summary>
    
      <category term="TOEFL" scheme="https://www.jiangluyu.com/categories/TOEFL/"/>
    
      <category term="GRE" scheme="https://www.jiangluyu.com/categories/TOEFL/GRE/"/>
    
    
      <category term="阅读" scheme="https://www.jiangluyu.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>独立口语思路练习</title>
    <link href="https://www.jiangluyu.com/2020/02/15/%E7%8B%AC%E7%AB%8B%E5%8F%A3%E8%AF%AD%E6%80%9D%E8%B7%AF%E7%BB%83%E4%B9%A0/"/>
    <id>https://www.jiangluyu.com/2020/02/15/独立口语思路练习/</id>
    <published>2020-02-15T14:52:49.000Z</published>
    <updated>2020-02-15T16:26:06.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q1-Smart-phone-amp-navigational-devices-or-ask-the-locals-for-direction"><a href="#Q1-Smart-phone-amp-navigational-devices-or-ask-the-locals-for-direction" class="headerlink" title="Q1: Smart phone &amp; navigational devices or ask the locals for direction?"></a>Q1: Smart phone &amp; navigational devices or ask the locals for direction?</h3><p><strong>Main idea:</strong> the former</p><p><strong>Reason 1:</strong> professional –&gt; accurate, efficient</p><p><strong>Example 1:</strong> locals maybe do not know or give obsolete information –&gt; slower, while navigational devices are always up-to-date</p><p><strong>Reason 2: </strong>no need to care about language problem</p><p><strong>Example 2:</strong> cannot speak Japanese, Last year travel to Japan, Google Map –&gt; not miss any event planned</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Q1-Smart-phone-amp-navigational-devices-or-ask-the-locals-for-direction&quot;&gt;&lt;a href=&quot;#Q1-Smart-phone-amp-navigational-devices-or-ask-th
      
    
    </summary>
    
      <category term="TOEFL" scheme="https://www.jiangluyu.com/categories/TOEFL/"/>
    
    
      <category term="口语" scheme="https://www.jiangluyu.com/tags/%E5%8F%A3%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>托福答题模板（自用）</title>
    <link href="https://www.jiangluyu.com/2020/02/15/%E6%89%98%E7%A6%8F%E7%AD%94%E9%A2%98%E6%A8%A1%E6%9D%BF%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/"/>
    <id>https://www.jiangluyu.com/2020/02/15/托福答题模板（自用）/</id>
    <published>2020-02-15T14:32:57.000Z</published>
    <updated>2020-02-21T18:16:58.392Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="TASK-1"><a href="#TASK-1" class="headerlink" title="TASK 1"></a>TASK 1</h3><pre class="mermaid">graph TD;  A(Main idea)-->B(Reason 1)-->C(Reason 2)</pre><p>Template:</p><blockquote><p>When …, I’d …/Well honestly, I (dis)agree with the idea.</p><p>The most obvious reason is that + sub idea 1.</p><p>In my case/Take my own experience for example, …</p><p>Another reason is that + sub idea 2.</p><p>To be more specific/Specifically speaking,…</p><p>(Those are the reasons why I am for/against the idea.)</p></blockquote><h3 id="TASK-2"><a href="#TASK-2" class="headerlink" title="TASK 2"></a>TASK 2</h3><p>Template:</p><blockquote><p>UNIV：</p><ul><li>The university is going to/announces that…because/in order to…</li></ul><p>S/T：</p><ul><li>A student/teacher suggests university should…because/in order to…</li></ul><p>The man/woman (dis)agrees with the idea.</p><p>He/She says that…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;TASK-1&quot;&gt;&lt;a href=&quot;#TASK-1&quot; class=&quot;headerlink&quot; title=&quot;TASK 1&quot;&gt;&lt;/a&gt;TASK 1&lt;/h3&gt;&lt;pre class=&quot;mermaid&quot;&gt;graph TD;
  A(Main
      
    
    </summary>
    
      <category term="TOEFL" scheme="https://www.jiangluyu.com/categories/TOEFL/"/>
    
    
      <category term="口语" scheme="https://www.jiangluyu.com/tags/%E5%8F%A3%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>托福口语语料积累（更新中）</title>
    <link href="https://www.jiangluyu.com/2020/02/15/%E6%89%98%E7%A6%8F%E5%8F%A3%E8%AF%AD%E8%AF%AD%E6%96%99%E7%A7%AF%E7%B4%AF%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/"/>
    <id>https://www.jiangluyu.com/2020/02/15/托福口语语料积累（更新中）/</id>
    <published>2020-02-15T14:12:31.000Z</published>
    <updated>2020-02-21T18:17:07.290Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="句型"><a href="#句型" class="headerlink" title="句型"></a>句型</h3><ul><li>The most obvious reason is that……</li><li>In my case, ……</li><li>Another reason is that……</li></ul><h3 id="词组"><a href="#词组" class="headerlink" title="词组"></a>词组</h3><h5 id="与help有关"><a href="#与help有关" class="headerlink" title="与help有关"></a>与help有关</h5><ul><li><strong>turn to sb. for help</strong> = <strong>seek help from sb.</strong></li><li><strong>be always around</strong> = <strong>be available</strong></li><li>with the help of sb.</li><li>help sb., help sb. with sth., help sb. to do sth.</li><li>offer sb. help, offer help to sb.</li><li>provide sb. with help, provide help for sb.</li><li><strong>give sb. a hand</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;句型&quot;&gt;&lt;a href=&quot;#句型&quot; class=&quot;headerlink&quot; title=&quot;句型&quot;&gt;&lt;/a&gt;句型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The most obvious reason is that……&lt;/li&gt;
&lt;li&gt;In 
      
    
    </summary>
    
      <category term="TOEFL" scheme="https://www.jiangluyu.com/categories/TOEFL/"/>
    
    
      <category term="口语" scheme="https://www.jiangluyu.com/tags/%E5%8F%A3%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo遇到的问题汇总</title>
    <link href="https://www.jiangluyu.com/2020/02/15/%E5%85%B3%E4%BA%8Ehexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://www.jiangluyu.com/2020/02/15/关于hexo遇到的问题汇总/</id>
    <published>2020-02-15T11:02:17.000Z</published>
    <updated>2020-02-21T15:52:33.443Z</updated>
    
    <content type="html"><![CDATA[<p>一些迁移、安装hexo时遇到的问题及解决方法。</p><a id="more"></a><h3 id="Q1-gyp-No-Xcode-or-CLT-version-detected"><a href="#Q1-gyp-No-Xcode-or-CLT-version-detected" class="headerlink" title="Q1: gyp: No Xcode or CLT version detected!"></a>Q1: gyp: No Xcode or CLT version detected!</h3><p>近日在将hexo从win迁移到mac时，卡在了npm安装上：</p><p>运行如下命令时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>出现如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt; node install</span><br><span class="line"></span><br><span class="line">node-pre-gyp WARN Tried to download(404): https://fsevents-binaries.s3-us-west-2.amazonaws.com/v1.2.4/fse-v1.2.4-node-v67-darwin-x64.tar.gz</span><br><span class="line">node-pre-gyp WARN Pre-built binaries not found <span class="keyword">for</span> fsevents@1.2.4 and node@11.14.0 (node-v67 ABI, unknown) (falling back to <span class="built_in">source</span> compile with node-gyp)</span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">'com.apple.pkg.CLTools_Executables'</span> found at <span class="string">'/'</span>.</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">'com.apple.pkg.DeveloperToolsCLILeo'</span> found at <span class="string">'/'</span>.</span><br><span class="line"></span><br><span class="line">No receipt <span class="keyword">for</span> <span class="string">'com.apple.pkg.DeveloperToolsCLI'</span> found at <span class="string">'/'</span>.</span><br><span class="line"></span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: `gyp` failed with <span class="built_in">exit</span> code: 1</span><br><span class="line">gyp ERR! stack     at ChildProcess.onCpExit (/usr/<span class="built_in">local</span>/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:351:16)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:193:13)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:255:12)</span><br><span class="line">gyp ERR! System Darwin 19.3.0</span><br><span class="line">gyp ERR! <span class="built_in">command</span> <span class="string">"/usr/local/Cellar/node/11.14.0/bin/node"</span> <span class="string">"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"</span> <span class="string">"configure"</span> <span class="string">"--fallback-to-build"</span> <span class="string">"--module=/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/lib/binding/Release/node-v67-darwin-x64/fse.node"</span> <span class="string">"--module_name=fse"</span> <span class="string">"--module_path=/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/lib/binding/Release/node-v67-darwin-x64"</span> <span class="string">"--napi_version=4"</span> <span class="string">"--node_abi_napi=napi"</span></span><br><span class="line">gyp ERR! cwd /Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents</span><br><span class="line">gyp ERR! node -v v11.14.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.7</span><br><span class="line">gyp ERR! not ok</span><br><span class="line">node-pre-gyp ERR! build error</span><br><span class="line">node-pre-gyp ERR! stack Error: Failed to execute <span class="string">'/usr/local/Cellar/node/11.14.0/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --module=/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/lib/binding/Release/node-v67-darwin-x64/fse.node --module_name=fse --module_path=/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/lib/binding/Release/node-v67-darwin-x64 --napi_version=4 --node_abi_napi=napi'</span> (1)</span><br><span class="line">node-pre-gyp ERR! stack     at ChildProcess.&lt;anonymous&gt; (/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/node_modules/node-pre-gyp/lib/util/compile.js:83:29)</span><br><span class="line">node-pre-gyp ERR! stack     at ChildProcess.emit (events.js:193:13)</span><br><span class="line">node-pre-gyp ERR! stack     at maybeClose (internal/child_process.js:999:16)</span><br><span class="line">node-pre-gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:266:5)</span><br><span class="line">node-pre-gyp ERR! System Darwin 19.3.0</span><br><span class="line">node-pre-gyp ERR! <span class="built_in">command</span> <span class="string">"/usr/local/Cellar/node/11.14.0/bin/node"</span> <span class="string">"/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/node_modules/node-pre-gyp/bin/node-pre-gyp"</span> <span class="string">"install"</span> <span class="string">"--fallback-to-build"</span></span><br><span class="line">node-pre-gyp ERR! cwd /Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents</span><br><span class="line">node-pre-gyp ERR! node -v v11.14.0</span><br><span class="line">node-pre-gyp ERR! node-pre-gyp -v v0.10.0</span><br><span class="line">node-pre-gyp ERR! not ok</span><br><span class="line">Failed to execute <span class="string">'/usr/local/Cellar/node/11.14.0/bin/node /usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js configure --fallback-to-build --module=/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/lib/binding/Release/node-v67-darwin-x64/fse.node --module_name=fse --module_path=/Users/louis/Documents/GitHub/jiangluyu.github.io/node_modules/fsevents/lib/binding/Release/node-v67-darwin-x64 --napi_version=4 --node_abi_napi=napi'</span> (1)</span><br><span class="line">...以下省略</span><br></pre></td></tr></table></figure><p>实际上，在尝试过使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>进行修复时，并不成功。</p><p><strong>解决方案如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf $(xcode-select -<span class="built_in">print</span>-path)</span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><h3 id="Q2-hexo迁移"><a href="#Q2-hexo迁移" class="headerlink" title="Q2: hexo迁移"></a>Q2: hexo迁移</h3><p>去年在原先的笔记本上建立的项目，彼时对github了解甚少，没想过在不同电脑上更新的需求，甚至还因此断更了一年（笑），迁移步骤如下：</p><p>ssh配置好后，克隆github上yourname.github.io项目到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure><p>删除除了.git以外的所有文件；</p><p>将blog源文件中的所有文件复制到xxx.github.io的文件夹中，并将theme文件夹中各个主题中的.git文件夹删除；</p><p>创建hexo分支，并切换到hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>将复制的文件提交到暂存区，并提交，推送至github：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'new branch source files'</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><p>更新blog时，只需要照常即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>切换至新电脑时，只需要执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo https://github.com/yourname/yourname.github.io</span><br></pre></td></tr></table></figure><p>在ssh配置正确，npm安装依赖后，即可更新。</p><h3 id="Q3-无法备份-themes"><a href="#Q3-无法备份-themes" class="headerlink" title="Q3: 无法备份/themes"></a>Q3: 无法备份/themes</h3><p>在删掉themes中的所有主题的.git之后，发现使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git comment -m <span class="string">'write your comment here'</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>依然无法成功将自己修改过的主题提交到github上。</p><h5 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h5><p>在确保删除了各个主题的.git文件后，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached -r themes</span><br><span class="line">git add themes</span><br><span class="line">git commit -m <span class="string">'write your comment here'</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些迁移、安装hexo时遇到的问题及解决方法。&lt;/p&gt;
    
    </summary>
    
      <category term="bugfix" scheme="https://www.jiangluyu.com/categories/bugfix/"/>
    
    
  </entry>
  
  <entry>
    <title>E867-转置矩阵</title>
    <link href="https://www.jiangluyu.com/2020/02/14/E867-%E8%BD%AC%E7%BD%AE%E7%9F%A9%E9%98%B5/"/>
    <id>https://www.jiangluyu.com/2020/02/14/E867-转置矩阵/</id>
    <published>2020-02-14T07:31:56.000Z</published>
    <updated>2020-02-21T18:17:35.461Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个矩阵 A， 返回 A 的转置矩阵。</p><p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。</p><p>示例 1：</p><p>输入：[[1,2,3],[4,5,6],[7,8,9]]<br>输出：[[1,4,7],[2,5,8],[3,6,9]]<br>示例 2：</p><p>输入：[[1,2,3],[4,5,6]]<br>输出：[[1,4],[2,5],[3,6]]</p><p>提示：</p><p>1 &lt;= A.length &lt;= 1000<br>1 &lt;= A[0].length &lt;= 1000</p><a id="more"></a><h3 id="方法一：遍历复制"><a href="#方法一：遍历复制" class="headerlink" title="方法一：遍历复制"></a>方法一：遍历复制</h3><p>重新创建一个vector，依照规律遍历并复制对应数字到所创建的vector中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; transpose(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; A) &#123;</span><br><span class="line">        <span class="keyword">int</span> col = A[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> row = A.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res(col);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> iRow = <span class="number">0</span>; iRow &lt; col; iRow++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> iCol = <span class="number">0</span>; iCol &lt; row; iCol++)</span><br><span class="line">            &#123;</span><br><span class="line">                res[iRow].push_back(A[iCol][iRow]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：<em>O</em>(<em>M</em>×<em>N</em>)，其中<em>M</em>与<em>N</em>分别为矩阵<em>A</em>的行数和列数。</li><li>空间复杂度：<em>O</em>(<em>M</em>×<em>N</em>)。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个矩阵 A， 返回 A 的转置矩阵。&lt;/p&gt;
&lt;p&gt;矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：[[1,2,3],[4,5,6],[7,8,9]]&lt;br&gt;输出：[[1,4,7],[2,5,8],[3,6,9]]&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入：[[1,2,3],[4,5,6]]&lt;br&gt;输出：[[1,4],[2,5],[3,6]]&lt;/p&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;p&gt;1 &amp;lt;= A.length &amp;lt;= 1000&lt;br&gt;1 &amp;lt;= A[0].length &amp;lt;= 1000&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.jiangluyu.com/categories/LeetCode/"/>
    
    
      <category term="matrix" scheme="https://www.jiangluyu.com/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>E206-反转链表</title>
    <link href="https://www.jiangluyu.com/2020/02/14/E206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.jiangluyu.com/2020/02/14/E206-反转链表/</id>
    <published>2020-02-13T16:35:27.000Z</published>
    <updated>2020-02-21T18:17:44.287Z</updated>
    
    <content type="html"><![CDATA[<p>反转一个单链表。</p><p>示例:</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p><a id="more"></a><h3 id="方法一：外部容器"><a href="#方法一：外部容器" class="headerlink" title="方法一：外部容器"></a>方法一：外部容器</h3><p>将链表转存至新的容器vector内，再利用vector本身的reverse_iterator进行反向遍历，将内容一一对应存入链表节点内。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; store;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            store.push_back(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* resHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* p = resHead;</span><br><span class="line">        ListNode* q = <span class="literal">nullptr</span>;</span><br><span class="line">        p-&gt;val = *(store.rbegin());</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator riter = store.rbegin() + <span class="number">1</span>; riter != store.rend(); riter++)</span><br><span class="line">        &#123;</span><br><span class="line">            q = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            q-&gt;val = *riter;</span><br><span class="line">            p-&gt;next = q;</span><br><span class="line">            p = q;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> resHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：<em>O</em>(<em>n</em>)，其中<em>n</em>为链表长度。</li><li>空间复杂度：<em>O</em>(<em>n</em>)。</li></ul><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><p>在遍历列表时，将当前节点的 next 指针改为指向它的前一个节点。分别需要一个指针用来记录上一个节点（previous），当前节点（current）以及下一个节点（next）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* nextTemp = <span class="literal">nullptr</span>;</span><br><span class="line">            nextTemp = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：<em>O</em>(<em>n</em>)，其中<em>n</em>为链表长度。</li><li>空间复杂度：<em>O</em>(1)。</li></ul><h3 id="方法三：递归"><a href="#方法三：递归" class="headerlink" title="方法三：递归"></a>方法三：递归</h3><p>递归方法比较难理解，假设我们传入的链表为<code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</code>，那么传入的<code>head</code>即节点<code>1</code>，递归令节点<code>curr</code>等于<code>reverseList(head-&gt;next)</code>，终止条件为<code>head或head-&gt;next为空</code>，并返回<code>head</code>。</p><p>在这个例子中，最后一层返回的即节点<code>5</code>，此时<code>head</code>指向节点<code>4</code>，我们令<code>head-&gt;next-&gt;next = head</code>，即<code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;4</code>：</p><p><img src="https://hexo-jiangluyu.oss-cn-shanghai.aliyuncs.com/01.png" alt="01"></p><p>接着，令<code>head-&gt;next = null</code>，即<code>1-&gt;2-&gt;3-&gt;4-&gt;null</code>且<code>5-&gt;4</code>： </p><p><img src="https://hexo-jiangluyu.oss-cn-shanghai.aliyuncs.com/02.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* curr = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h5><ul><li>时间复杂度：<em>O</em>(<em>n</em>)，其中<em>n</em>为链表长度。</li><li>空间复杂度：<em>O</em>(<em>n</em>)，递归至<em>n</em>层。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转一个单链表。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL&lt;br&gt;输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="https://www.jiangluyu.com/categories/LeetCode/"/>
    
    
      <category term="list" scheme="https://www.jiangluyu.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>少少</title>
    <link href="https://www.jiangluyu.com/2019/01/04/%E5%B0%91%E5%B0%91/"/>
    <id>https://www.jiangluyu.com/2019/01/04/少少/</id>
    <published>2019-01-03T16:05:16.000Z</published>
    <updated>2020-02-14T09:10:16.141Z</updated>
    
    <content type="html"><![CDATA[<p>“如果提前了解了你们的人生，不知你们是否还会有勇气前来？”</p><a id="more"></a><hr><p>再想起这句台词，电影都不知是何日看的了，挺早的。</p><p>我想说，有啊，就是少点。</p><p>2018-2019的交界时，立了好多flag，还试着跟一波朋友圈网易云音乐flag的热潮，无奈轰趴的那个夜晚，明明显示着长按保存，我却怎么样都唤不出菜单。怎么回事？谁知道呢。我只知道，最后我放弃了，只在总结里添了一行信号微弱的粗浅论调。熬夜的后遗症还在，大致就是睡不醒醒就睡，萎靡着，空洞着，压缩着吃饭、喝水等等一切行动的欲望来恢复精力。</p><p>打卡到最后几个眼神都是迷离的，隐隐听着音响里的歌，再也不循环那个熟悉的、混杂的歌单了，随便什么，有声音就好，不是神曲就好，一个人的世界里，它们都有自己的声音。</p><p>喜欢美短，想取个名字叫辛巴(Simba)，而所有的不喜欢和不知道，是还没准备好。</p><p>出门就是一场义无反顾的冒险，不消多远，上厕所都赶时间，怕残羹被收走。相信世间温暖，禁不住旁人冷漠，观察得更多，想得更多，连绝对不常用的“plover”都变得难以忘记，才发现所谓的幸运四叶草，也只不过是“four-leaf clover”（四叶的三叶草）而已。</p><p><img src="少少/01.jpg" alt="入水"></p><p>幸好，镜头下死水微澜，是小野鸭在凫水。</p><p>不要等风来，跑起来，它就奔向了你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“如果提前了解了你们的人生，不知你们是否还会有勇气前来？”&lt;/p&gt;
    
    </summary>
    
      <category term="随便写写" scheme="https://www.jiangluyu.com/categories/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    
    
      <category term="随想" scheme="https://www.jiangluyu.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="生活" scheme="https://www.jiangluyu.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>不问归期来路</title>
    <link href="https://www.jiangluyu.com/2019/01/01/%E4%B8%8D%E9%97%AE%E5%BD%92%E6%9C%9F%E6%9D%A5%E8%B7%AF/"/>
    <id>https://www.jiangluyu.com/2019/01/01/不问归期来路/</id>
    <published>2018-12-31T23:12:27.000Z</published>
    <updated>2020-02-15T04:32:29.927Z</updated>
    
    <content type="html"><![CDATA[<p>这条路上的人有很多，在2018这段收费公路上，说真的，还挺挤的（笑）。</p><p>我想了好久，这一路我怎么过来的，遇到了哪些人，经历了哪些事。</p><p>全部写下来吧。</p><a id="more"></a><h5 id="2017-12-31"><a href="#2017-12-31" class="headerlink" title="2017.12.31"></a><strong>2017.12.31</strong></h5><p>已经忘了写了什么又删了什么。</p><p><img src="不问归期来路/01.jpg" alt="01"></p><h5 id="2018-01-01"><a href="#2018-01-01" class="headerlink" title="2018.01.01"></a>2018.01.01</h5><p> 去年的年终总结嗷。</p><blockquote><p>我的2017，疯狂而又迷人。<br>疯狂而安静的高考倒计时，逃晚自习躺操场上看星星，也只有那会儿做得出。“幽暗的萤绿色灯光下，每个人的背影都漾在周边的空气里，或散步，或疾走，或嬉戏，或追闹，放在这片草坪上，零落得像幅静止的画。”这是我的草坪，它留在那儿了。<br>“我有故事，你有酒吗?”<br>“抱歉，我的故事那么无聊，没劲。”<br>高考，以前很看重，可能以后也很看重，至少现在我觉得没那么重要了。它只会决定你的下一步往哪儿走，可是无论你往哪儿走，都会认识一堆槽点满满却又可爱至极的人。<br>俗点，跟史主任说得一样，“只是决定你以后在哪个城市打英雄联盟”，过了那么久，只是英雄联盟变成了吃鸡王者了吧。<br>想得最多的，还怕是那个高考前阵的夜话闲聊和传奇的宜兴爱情故事。<br>六月，考场上潇洒走一回，和想的一样，真的“洒”了一点点，但其实，就像用杯子运水，除非下雨天，否则即使手再稳，也会失去些，蒸发什么的，总是存在的。<br>何况我手也没那么稳。<br>第一首想唱的歌，&lt;成都&gt;，没成想真的来了成都，火锅冒菜串串川菜的天堂，可惜傻鸡没来@驴蛋蛋。一水儿的来四川的兄弟，只剩下一个@连长。<br>诶，啥时候寄点特产来不？@驴蛋蛋<br>想你早日脱单，在线等，挺急的。<br>@许致远 我可能欠自己一份真正的疯狂，至少我现在不后悔。祝你安好，早日脱单。<br>这里得留给帅杨 @骚羊…… 的未成行的和桥烧烤和带劲的重庆小面。<br>@周成瑜 阿华还在田里努力耕作。<br>@徐雨涵 山上新鲜采摘的熊猫。<br>@冯羽韬 骚还是你骚。<br>@朱刚宪 47474747!<br>北边的，南边的，我终将从你们的轨迹中渐渐淡去。我希望那一刻哪怕我糊涂了，我们之间也比陌生人多一层回忆的纸。<br>鸟蒋，蒋汤姆，大炮，懒&lt;菜?傻?-.-&gt;猫，蒋医师，他们都在原地，不会动了，但我会一直带着他们走，直到我走不动了为止。<br>七月上午学车，下午学吉他，最长最浪的暑假没浪起来，单纯充实。吃了贼多各种酒店的谢师宴，感觉神奇，好吧多到不想吃了。<br>@吴好猛哦 八月初疯狂的两人第一次出国自由行，语言不通，眼里全是天书，却那么有趣。因为交通问题去到岚山没坐小火车也没有漂流;在奈良喂鹿，衣服裤子被鹿咬得湿湿的;心斋桥为了买东西，暴走近四万步，穿梭人流，崩溃得不行;又累又饿的朝日生啤+大阪烧，爽;环球影城奇幻的项目和瓢泼的大雨毫不冲突;因为行李受限而穿了n件衣服n条裤子上飞机……遇见了有趣的人有趣的事，还是很好玩呀(｡ì_í｡)<br>田子坊，南京路，科技馆，迪士尼，还记得小时候呆的魔都，没怎么变，迪士尼的人数是真的骚了呀……佛系，佛系。<br>凌晨出发来成都，和爸妈在附近吃了第一顿火锅，那滋味已经忘了，可能比现在的，要美一些。<br>哦对，尼玛全聚德呢？@驴蛋蛋<br>最后又回来了啊:报道，入学，相识，面试，学习……期末。<br>你好，我的2018。</p></blockquote><h5 id="2018-02"><a href="#2018-02" class="headerlink" title="2018.02"></a>2018.02</h5><p>放假回家<del>三件事</del> 两件事：<del>学Java</del>、TOEFL、宣传部作业（海报和手绘视频~）</p><p><img src="不问归期来路/02.png" alt="02"></p><p>视频：<a href="https://www.bilibili.com/video/av20413559">https://www.bilibili.com/video/av20413559</a></p><h5 id="2018-03-01"><a href="#2018-03-01" class="headerlink" title="2018.03.01"></a>2018.03.01</h5><p>做了一个奇怪的梦。</p><p><img src="不问归期来路/03.png" alt="03"></p><h5 id="2018-03"><a href="#2018-03" class="headerlink" title="2018.03"></a>2018.03</h5><p>为了看牙，来来回回上海-成都飞了两三次。</p><p><img src="不问归期来路/04.png" alt="04"></p><h5 id="2018-03-1"><a href="#2018-03-1" class="headerlink" title="2018.03"></a>2018.03</h5><p>这学期周三半学期满课来着…</p><p><img src="不问归期来路/05.png" alt="05"></p><h5 id="2018-04-15"><a href="#2018-04-15" class="headerlink" title="2018.04.15"></a>2018.04.15</h5><p>立了一个flag，好的，倒了，今年会加油的哈哈哈哈哈。</p><p>有时候直接发公众号了来着。</p><p>链接：<a href="http://jiangluyu.com">http://jiangluyu.com</a></p><p><img src="不问归期来路/06.png" alt="06"></p><h5 id="2018-05-12"><a href="#2018-05-12" class="headerlink" title="2018.05.12"></a>2018.05.12</h5><p>复联上映，过了几天去看了，死了很多人。</p><h5 id="2018-05-17"><a href="#2018-05-17" class="headerlink" title="2018.05.17"></a>2018.05.17</h5><p>昨天夜里江安雷暴，窗边的我并没有醒。</p><p><img src="不问归期来路/07.png" alt="07"></p><h5 id="2018-05-24"><a href="#2018-05-24" class="headerlink" title="2018.05.24"></a>2018.05.24</h5><p>这事我要记住的hhh</p><p><img src="不问归期来路/08.png" alt="08"></p><h5 id="2018-05-28"><a href="#2018-05-28" class="headerlink" title="2018.05.28"></a>2018.05.28</h5><p>不知道@连长你记住没有，我帮你回忆回忆hhh</p><p><img src="不问归期来路/09.png" alt="09"></p><h5 id="2018-06"><a href="#2018-06" class="headerlink" title="2018.06"></a>2018.06</h5><p>不管是上课还是考试月今年都有看世界杯嗷。</p><p><img src="不问归期来路/10.png" alt="10"></p><h5 id="2018-06-28"><a href="#2018-06-28" class="headerlink" title="2018.06.28"></a>2018.06.28</h5><p>水漫三八广场</p><p><img src="不问归期来路/11.png" alt="11"></p><h5 id="2018-07"><a href="#2018-07" class="headerlink" title="2018.07"></a>2018.07</h5><p>没想到军训当了标兵。</p><p>阿飞走的时候说：“走起，川大的兄弟，未来的精英们，好好学习，相逢就是缘分。”</p><p><img src="不问归期来路/12.png" alt="12"></p><h5 id="2018-08-22"><a href="#2018-08-22" class="headerlink" title="2018.08.22"></a>2018.08.22</h5><p>六级没到600（591），90免修失败</p><p><img src="不问归期来路/13.png" alt="13"></p><h5 id="2018-09-14"><a href="#2018-09-14" class="headerlink" title="2018.09.14"></a>2018.09.14</h5><p>学生会宣讲效果正式破产</p><p><img src="不问归期来路/14.png" alt="14"></p><h5 id="2018-10-04"><a href="#2018-10-04" class="headerlink" title="2018.10.04"></a>2018.10.04</h5><p>第一次参加游戏线下活动</p><p><img src="不问归期来路/15.png" alt="15"></p><h5 id="2018-11-25"><a href="#2018-11-25" class="headerlink" title="2018.11.25"></a>2018.11.25</h5><p>正式加入飞扬（拜师了）</p><p><img src="不问归期来路/16.png" alt="16"></p><h5 id="2018-11-30"><a href="#2018-11-30" class="headerlink" title="2018.11.30"></a>2018.11.30</h5><p>？</p><p><img src="不问归期来路/17.png" alt="17"></p><h5 id="2018-12-09"><a href="#2018-12-09" class="headerlink" title="2018.12.09"></a>2018.12.09</h5><p>迎新晚会结束了（老父亲般欣慰）</p><p><img src="不问归期来路/18.png" alt="18"></p><hr><p>还有很多很多啊，上面的只是空间整理的。</p><p>比如换掉了用了一年半一直很喜欢的签名：一棵草，也会为了春天不遗余力。</p><p>可能比起上一段路，这一段没有那么冒险刺激，没有那么诗情画意，更多的是躲在幽暗中努力，和朋友们一起患难。这一年睡得不多，无论是从寒假回家开始，还是在学校肝视频，肝项目，肝活动，再加上一些习惯性晚睡，有时候丧，有时候暖。现在想想度过漫漫长夜一定不容易吧，睡觉一定是最好的对策。</p><p>生活不易，念且维坚。很感谢你们，这一段路收到了很多惊喜和温暖，还有时不时的交流与吐槽，这一路给了我很重要的力量，黄金日子里，愿友谊常在。路是自己选的，很早的时候就选了，很幸运能够遇到你们，都是可以独舞的灵魂。</p><p>今年刷了很多电影，顺便整理了一下，做个参考和留念。【附在后面】</p><p>眼看到了2019年了，希望今年拿下期末，拿下TOEFL，KO项目，KO论文，头发变多，继续单身，找到更多的动力，认识更多有趣的灵魂。嗯，剩下的我还没想好。2019应该有2019自己的喜悦与悲伤留给我吧，挺期待的。（flag可别倒啊！）</p><p>今年跨年和家乡来的小伙伴们过了，很冷很难忘，真的在成都的街头走一走，还走了一年（笑）。</p><p>说来今年成都下雪了，但是江安很小很短，没有积过雪。</p><p>窗外无雪，却念雪上人。</p><hr><p>附：</p><p>弱点                                                       ※※※※※※</p><p>美好的意外                                           ※</p><p>火锅英雄                              ※</p><p>全民情敌                              ※※※</p><p>飞行家                                  ※※※※</p><p>127小时                                                ※※※ </p><p>白日梦想家                                           ※※※※※※</p><p>真爱至上                                               ※※※※※※</p><p>彗星来的那一夜                                    ※※※※</p><p>大空头                                                    ※※※※</p><p>我是谁：没有绝对安全的系统              ※※※</p><p>轻松自由                                                 ※※※※※※</p><p>孤儿怨                                                     /</p><p>放牛班的春天                                          ※※※※※※</p><p>监守自盗                                                  ※※</p><p>返老还童                                                  ※※※※※※</p><p>点球成金                                                  ※※※※※※</p><p>死亡医生                                                  ※※※※</p><p>大而不倒                                                  ※※※※※※</p><p>社交网络                                                  ※※※※※</p><p>成事在人                                                  ※※※※</p><p>无双                                                         ※※※</p><p>传奇的诞生                                              ※※※※</p><p>你好，之华                                              ※※※※</p><p>胖子行动队                                              ※※</p><p>月球                                                          ※※※※</p><p>禁闭岛                                                      ※※※※※※</p><p>私人订制                                                  ※※※</p><p>甲方乙方                                                  ※※※</p><p>让子弹飞                                                  ※※※※※</p><p>一步之遥                                                  ?</p><p>邪不压正                                                  ※※※※</p><p>看不见的客人                                          ※※※※※※</p><p>三块广告牌                                              ※※※※※※</p><p>玉子爱情故事                                          ※※※</p><p>达拉斯买家俱乐部                                   ※※※※※※</p><p>最佳出价                                                   ※※※※</p><p>再次出发                                                   ※※※※※※</p><p>惊天魔盗团2                                             ※※</p><p>惊天魔盗团                                               ※※※※</p><p>的士速递                                                   ※※※※</p><p>爱情公寓                                                   ?</p><p>超体                                                           ※※※※</p><p>闻香识女人                                               ※※※※※※</p><p>神奇动物在哪里                                       ※※※※</p><p>奇异博士                                                   ※※※※</p><p>美丽心灵                                                   ※※※※※※</p><p>心花路放                                                   ※※</p><p>幸福终点站                                                 /</p><p>星运里的错                                               ※※※※※</p><p>头号玩家                                                   ※※※※※※</p><p>闪灵                                                           ※※※※</p><p>泰迪熊2                                                     ※※※</p><p>姚明年                                                       ※※※</p><p>钢琴家                                                       ※※※※※</p><p>火星救援                                                   ※※※※※※</p><p>解救吾先生                                               ※※※※</p><p>昨日青空                                                   ※※※</p><p>星际穿越                                                   ※※※※※※</p><p>至暗时刻                                                   ※※※※※※</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这条路上的人有很多，在2018这段收费公路上，说真的，还挺挤的（笑）。&lt;/p&gt;
&lt;p&gt;我想了好久，这一路我怎么过来的，遇到了哪些人，经历了哪些事。&lt;/p&gt;
&lt;p&gt;全部写下来吧。&lt;/p&gt;
    
    </summary>
    
      <category term="年终总结" scheme="https://www.jiangluyu.com/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="https://www.jiangluyu.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
